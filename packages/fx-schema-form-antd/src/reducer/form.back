import { createAction, createReducer, EmptyActionCreator, SimpleActionCreator, ComplexActionCreator } from "redux-act";
import { Reducer } from "redux";
import jpp from "json-pointer";
import cloneDeep from "lodash.clonedeep";

import { SchemaFormMeta } from "./meta";

export interface SchemaFormState<T> {
    data: T;
    meta: { [key: string]: SchemaFormMeta };
}

export interface Actions {
    updateItem: SimpleActionCreator<{ keys: Array<string>, data: any }>;
    toggleItem: SimpleActionCreator<{ keys: Array<string> }>;
    removeItem: SimpleActionCreator<{ keys: Array<string>, data: any }>;
    addItem: SimpleActionCreator<{ keys: Array<string>, data: any }>;
    switchItem: SimpleActionCreator<{ keys: Array<string>, data: any }>;
}

export class FormReducer {
    /**
     * 单个元素的值变化时候调用
     */
    private updateItem: SimpleActionCreator<{ keys: Array<string>, data: any }> = createAction("更新表单值");
    /**
     * 显示/隐藏元素
     */
    private toggleItem: SimpleActionCreator<{ keys: Array<string> }> = createAction("显示/隐藏元素");
    /**
     * 删除元素
     */
    private removeItem: SimpleActionCreator<{ keys: Array<string>, data: any }> = createAction("删除元素");
    /**
     * 添加元素
     */
    private addItem: SimpleActionCreator<{ keys: Array<string>, data: any }> = createAction("添加元素");
    /**
     * 元素移位
     */
    private switchItem: SimpleActionCreator<{ keys: Array<string>, data: any }> = createAction("元素移位");

    /**
     * 验证所有的字段
     */
    private validateAllField: EmptyActionCreator = createAction("验证表单中所有的字段");

    constructor(private initialState: any) { }

    /**
     * 获取当前的actions
     */
    public get actions(): Actions {
        return {
            updateItem: this.updateItem,
            toggleItem: this.toggleItem,
            removeItem: this.removeItem,
            addItem: this.addItem,
            switchItem: this.switchItem
        };
    }

    // /**
    //  * 返回当前的reducer
    //  */
    // public get reducer1(): Reducer<any> {
    //     return createReducer<any>({
    //         [this.updateItem as any]: (state: SchemaFormState<any>, { keys, data, meta }:
    //             { keys: Array<string>, data: any, meta: { isValid: boolean } }) => {
    //             let { originData, originMeta } = this.getOrigin(state);
    //             let { normalKey, escapeKey } = this.getKey(keys);
    //             let curMeta = this.getCurMeta(originMeta, escapeKey);

    //             jpp(originData).set(normalKey, data);
    //             this.updateMeta(keys, originMeta, escapeKey, Object.assign({}, curMeta, meta));
    //             // jpp(originMeta).set(escapeKey, Object.assign({}, curMeta, meta));

    //             return Object.assign({}, state, { data: originData, meta: originMeta });
    //         },
    //         [this.toggleItem as any]: (state: SchemaFormState<any>, { keys }: { keys: Array<string> }) => {
    //             let originMeta = Object.assign({}, state.meta);
    //             let { normalKey, escapeKey } = this.getKey(keys);
    //             let curMeta = this.getCurMeta(originMeta, escapeKey);

    //             this.updateMeta(keys, originMeta, escapeKey, Object.assign({}, curMeta, { isShow: !!!curMeta.isShow }));

    //             return Object.assign({}, state, { meta: originMeta });
    //         },
    //         [this.addItem as any]: (state, { keys, data }:
    //             { keys: Array<string>, data: any }) => {
    //             let { originData, originMeta } = this.getOrigin(state);
    //             let { normalKey, escapeKey } = this.getKey(keys);
    //             let curMeta = this.getCurMeta(originMeta, escapeKey);
    //             let curData = jpp(originData).has(normalKey) ? jpp(originData).get(normalKey) : [];

    //             curData.push(data);

    //             jpp(originData).set(normalKey, curData);
    //             this.updateMeta(keys, originMeta, escapeKey, curMeta);
    //             // jpp(originMeta).set(escapeKey, curMeta);

    //             return Object.assign({}, state, { data: originData, meta: originMeta });
    //         },
    //         [this.removeItem as any]: (state: SchemaFormState<any>, { keys, index }: { index: number, keys: Array<string> }) => {
    //             if (index === undefined || typeof index !== "number") {
    //                 return state;
    //             }

    //             let { originData, originMeta } = this.getOrigin(state);
    //             let { normalKey, escapeKey } = this.getKey([...keys, index.toString()]);

    //             if (originData && jpp(originData).has(normalKey)) {
    //                 jpp(originData).remove(normalKey);
    //             }
    //             if (originMeta && jpp(originMeta).has(escapeKey)) {
    //                 jpp(originMeta).remove(escapeKey);
    //             }

    //             return Object.assign({}, state, { data: originData, meta: originMeta });
    //         },
    //         [this.switchItem as any]: (state: SchemaFormState<any>, { keys, curIndex, switchIndex }: {
    //             curIndex: number;
    //             switchIndex: number;
    //             keys: Array<string>;
    //         }) => {
    //             let { originData, originMeta } = this.getOrigin(state);
    //             let { normalKey, escapeKey } = this.getKey(keys);
    //             let curData = jpp(originData).get(normalKey), curMeta, newMeta;

    //             if (jpp(originMeta).has(escapeKey)) {
    //                 curMeta = this.getCurMeta(originMeta, escapeKey);
    //             }

    //             // 向上移动
    //             if (curIndex > switchIndex) {
    //                 curData = [
    //                     ...[].concat(curData).splice(0, switchIndex),
    //                     curData[curIndex],
    //                     curData[switchIndex],
    //                     ...[].concat(curData).splice(curIndex + 1)
    //                 ];
    //                 if (curMeta) {
    //                     newMeta = [
    //                         ...[].concat(curMeta).splice(0, switchIndex),
    //                         curMeta[curIndex],
    //                         curMeta[switchIndex],
    //                         ...[].concat(curMeta).splice(curIndex + 1)
    //                     ];
    //                 }
    //             } else {
    //                 // 向下移动
    //                 curData = [
    //                     ...[].concat(curData).splice(0, curIndex),
    //                     curData[switchIndex],
    //                     curData[curIndex],
    //                     ...[].concat(curData).splice(switchIndex + 1)
    //                 ];
    //                 if (curMeta) {
    //                     newMeta = [
    //                         ...[].concat(curMeta).splice(0, curIndex),
    //                         curMeta[switchIndex],
    //                         curMeta[curIndex],
    //                         ...[].concat(curMeta).splice(switchIndex + 1)
    //                     ];
    //                 }
    //             }

    //             jpp(originData).set(normalKey, curData);

    //             if (curMeta) {
    //                 this.updateMeta(keys, originMeta, escapeKey, newMeta);
    //             }

    //             return Object.assign({}, state, { data: originData, meta: originMeta });
    //         }
    //     }, this.initialState);
    // }

    /**
     * 返回当前的reducer
     */
    public get reducer(): Reducer<any> {
        return createReducer<any>({
            [this.updateItem as any]: (state: SchemaFormState<any>, { keys, data, meta }:
                { keys: Array<string>, data: any, meta: { isValid: boolean } }) => {
                let { originData, originMeta } = this.getOrigin(state);
                let { normalKey, escapeKey } = this.getKey(keys);
                let curMeta = this.getCurMeta(originMeta, escapeKey);

                jpp(originData).set(normalKey, data);
                this.updateMeta(keys, originMeta, escapeKey, Object.assign({}, curMeta, meta));
                // jpp(originMeta).set(escapeKey, Object.assign({}, curMeta, meta));

                return Object.assign({}, state, { data: originData, meta: originMeta });
            },
            [this.toggleItem as any]: (state: SchemaFormState<any>, { keys }: { keys: Array<string> }) => {
                let originMeta = Object.assign({}, state.meta);
                let { normalKey, escapeKey } = this.getKey(keys);
                let curMeta = this.getCurMeta(originMeta, escapeKey);

                this.updateMeta(keys, originMeta, escapeKey, Object.assign({}, curMeta, { isShow: !!!curMeta.isShow }));

                return Object.assign({}, state, { meta: originMeta });
            },
            [this.addItem as any]: (state, { keys, data }:
                { keys: Array<string>, data: any }) => {
                let { originData, originMeta } = this.getOrigin(state);
                let { normalKey, escapeKey } = this.getKey(keys);
                let curMeta = this.getCurMeta(originMeta, escapeKey);
                let curData = jpp(originData).has(normalKey) ? jpp(originData).get(normalKey) : [];

                curData.push(data);

                jpp(originData).set(normalKey, curData);
                this.updateMeta(keys, originMeta, escapeKey, curMeta);
                // jpp(originMeta).set(escapeKey, curMeta);

                return Object.assign({}, state, { data: originData, meta: originMeta });
            },
            [this.removeItem as any]: (state: SchemaFormState<any>, { keys, index }: { index: number, keys: Array<string> }) => {
                if (index === undefined || typeof index !== "number") {
                    return state;
                }

                let { originData, originMeta } = this.getOrigin(state);
                let { normalKey, escapeKey } = this.getKey([...keys, index.toString()]);

                if (originData && jpp(originData).has(normalKey)) {
                    jpp(originData).remove(normalKey);
                }
                if (originMeta && jpp(originMeta).has(escapeKey)) {
                    jpp(originMeta).remove(escapeKey);
                }

                return Object.assign({}, state, { data: originData, meta: originMeta });
            },
            [this.switchItem as any]: (state: SchemaFormState<any>, { keys, curIndex, switchIndex }: {
                curIndex: number;
                switchIndex: number;
                keys: Array<string>;
            }) => {
                let { originData, originMeta } = this.getOrigin(state);
                let { normalKey, escapeKey } = this.getKey(keys);
                let curData = jpp(originData).get(normalKey), curMeta, newMeta;

                if (jpp(originMeta).has(escapeKey)) {
                    curMeta = this.getCurMeta(originMeta, escapeKey);
                }

                // 向上移动
                if (curIndex > switchIndex) {
                    curData = [
                        ...[].concat(curData).splice(0, switchIndex),
                        curData[curIndex],
                        curData[switchIndex],
                        ...[].concat(curData).splice(curIndex + 1)
                    ];
                    if (curMeta) {
                        newMeta = [
                            ...[].concat(curMeta).splice(0, switchIndex),
                            curMeta[curIndex],
                            curMeta[switchIndex],
                            ...[].concat(curMeta).splice(curIndex + 1)
                        ];
                    }
                } else {
                    // 向下移动
                    curData = [
                        ...[].concat(curData).splice(0, curIndex),
                        curData[switchIndex],
                        curData[curIndex],
                        ...[].concat(curData).splice(switchIndex + 1)
                    ];
                    if (curMeta) {
                        newMeta = [
                            ...[].concat(curMeta).splice(0, curIndex),
                            curMeta[switchIndex],
                            curMeta[curIndex],
                            ...[].concat(curMeta).splice(switchIndex + 1)
                        ];
                    }
                }

                jpp(originData).set(normalKey, curData);

                if (curMeta) {
                    this.updateMeta(keys, originMeta, escapeKey, newMeta);
                }

                return Object.assign({}, state, { data: originData, meta: originMeta });
            }
        }, this.initialState);
    }

    private updateItemHandle(state: any, { keys, data, meta }: { keys: Array<string>, data: any, meta: { isValid: boolean } }) {
        let { originData, originMeta } = this.getOrigin(state);
        let { } = originMeta.getKey(keys);

        jpp(originData).set(normalKey, data);
        return state;
    }










    /**
     * 获取当前state的信息
     * @param state 当前的state
     */
    private getOrigin(state: SchemaFormState<any>): { originData: any; originMeta: { [key: string]: SchemaFormMeta }; } {
        let originData = cloneDeep(state.data);
        let originMeta = cloneDeep(state.meta) || { isShow: true };

        return { originData, originMeta };
    }

    private updateMeta(keys: Array<string>, originMeta: { [key: string]: SchemaFormMeta; }, escapeKey: string, meta: SchemaFormMeta): void {
        let parentKeys = [].concat(keys).splice(0, keys.length - 1);

        if (!parentKeys.length) {
            return jpp(originMeta).set(escapeKey, meta);
        }

        let { escapeKey: pescapeKey } = this.getKey(parentKeys);
        let curMeta = this.getCurMeta(originMeta, pescapeKey);

        jpp(originMeta).set(pescapeKey, curMeta);
        jpp(originMeta).set(escapeKey, meta);
    }

    /**
     * 获得当前字段的key
     * @param keys    当前字段的Keys
     */
    private getKey(keys: Array<string>): { normalKey: string; escapeKey: string; } {
        const key = jpp.compile(keys);

        return {
            normalKey: key,
            escapeKey: key
        };
    }

    private getCurMeta(originMeta: { [key: string]: SchemaFormMeta; }, escapeKey: string): SchemaFormMeta {
        let curMeta;

        if (jpp(originMeta).has(escapeKey)) {
            curMeta = jpp(originMeta).get(escapeKey);
        }
        if (!curMeta) {
            curMeta = [];
            curMeta.isShow = true;
        }

        return curMeta;
    }
}
